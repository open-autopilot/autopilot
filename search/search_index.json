{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#overview","title":"Overview","text":"<p>The Autopilot system presented in this documentation is a sophisticated ROS 2-based solution designed to operate seamlessly across diverse platforms. Developed with a specific focus on navigating fields of crops for precision tasks, its comprehensive features are geared towards enhancing agricultural automation. This documentation serves as a crucial guide for a broad audience, including developers, engineers, and enthusiasts seeking to understand, deploy, and customize the Autopilot to meet their specific agricultural automation needs.</p> <p></p>"},{"location":"#build-and-deployment-procedures","title":"Build and Deployment Procedures","text":""},{"location":"#development-guidelines","title":"Development Guidelines","text":""},{"location":"build/","title":"Build Procedures","text":"<p>To deploy this project there are a certain steps that need to be followed.  You build the images on a powerfull windows computer with WSL or a Linux computer.  Then you transfer them to your less powerfull Companion PC to run the code there.</p>"},{"location":"build/#on-wsl-or-linux","title":"On WSL or Linux","text":""},{"location":"build/#install-docker","title":"Install Docker","text":"<p>First you need to make sure you have installed docker on the machine.  You can do this by following this tutorial: Install Docker. </p>"},{"location":"build/#install-qemu","title":"Install QEMU","text":"<p>To be able to build multiplatform images,  another tool is needed. This tool is called QEMU.  You can install by running the following commands. <pre><code>sudo apt install qemu-user-static\n</code></pre></p>"},{"location":"build/#clone-the-repository","title":"Clone the repository","text":"<p>Clone the repository so we have acces to the buildtools.  And so we also have access to the source code. You also might need to create a build dir.  You can do this form autopilot/buildtools/build. </p>"},{"location":"build/#build-images","title":"Build images","text":"<p>You can easily build the images with the build scripts provided.  Make sure your in the autopilot directory when you run them.  This build process is quite heavy. Make sure you have atleast 16GB RAM &amp; 8 Threads.  <pre><code># ... = linux/arm64 or linux/amd64\n./buildtools/build.sh -p ...\n</code></pre> The resulted files are saved in the .tar format. They are not compressed. </p>"},{"location":"build/#transfer-images","title":"Transfer images","text":"<p>To tranfer the images make sure you select the platform you want to transfer.  Make sure your in the autopilot directory when you run them.  <pre><code># ... = linux/arm64 or linux/amd64\n# ... = wsl or linux\n./buildtools/transfer.sh -p ... -t ...\n</code></pre> The -t says what type of tranfser to use either scp for windows or rsync for linux. </p>"},{"location":"build/#on-companion-pc","title":"On Companion PC","text":""},{"location":"build/#install-docker_1","title":"Install Docker","text":"<p>First you need to make sure you have installed docker on the machine.  You can do this by following this tutorial: Install Docker.</p>"},{"location":"build/#clone-the-repository_1","title":"Clone the repository","text":"<p>Clone the repository so we have acces to the buildtools. You also might need to create a build dir.  You can do this form autopilot/buildtools/build. </p>"},{"location":"build/#unpack-images","title":"Unpack images","text":"<p>To tranfer the images make sure you select the platform you want to transfer.  Make sure your in the autopilot directory when you run them.  <pre><code>./buildtools/unpack.sh\n</code></pre> The -t says what type of tranfser to use either scp for windows or rsync for linux. </p>"},{"location":"details/","title":"Design Details","text":""},{"location":"details/#general-design","title":"General Design","text":""},{"location":"details/#vision-service","title":"Vision Service","text":""},{"location":"details/#navigation-service","title":"Navigation Service","text":""},{"location":"rules/","title":"Developer Procedures","text":""},{"location":"rules/#coding-style-guide","title":"Coding Style Guide","text":"<p>This code style guide covers conventions for naming and formatting in both C++ and Python. It includes guidelines, like naming conventions for classes, variables and functions. The guide also covers, line length limitations, and the placement of braces. These guidelines aim to improve code consistency, readability, and maintenance across both C++ and Python projects.</p>"},{"location":"rules/#naming-conventions","title":"Naming Conventions","text":"<ul> <li> <p>Classes: <pre><code>// C++ Example\nclass MyClass {\npublic:\n    // class members\n};\n</code></pre> <pre><code># Python Example\nclass MyClass:\n    def __init__(self):\n        # constructor body\n        pass\n</code></pre></p> </li> <li> <p>Variables/Functions: <pre><code>// C++ Example\nint myFunction(int input) {\n    // function body\n}\n</code></pre> <pre><code># Python Example\ndef my_function(input):\n    # function body\n    pass\n</code></pre></p> </li> <li> <p>Constants: <pre><code>// C++ Example\nstatic const int MAX_VALUE = 100;\n</code></pre></p> </li> </ul>"},{"location":"rules/#code-formatting","title":"Code Formatting","text":"<ul> <li>Indentation: Use one tab for indentation.</li> <li>Line Length: Limit lines length for readabilty.</li> <li>Brace Placement: Place opening braces on the same line. <pre><code>// C++ Example\nif (condition) {\n    // code here\n}\n</code></pre></li> </ul>"},{"location":"rules/#testing-procedures","title":"Testing Procedures","text":"<p>Our ROS 2 code testing strategy seamlessly blends code compilation and integration testing, creating a unified process within the ROS 2 ecosystem:</p>"},{"location":"rules/#code-compilation-and-integration-testing","title":"Code Compilation and Integration Testing","text":"<p>Initiating our process, we compile the ROS 2 codebase using tools like colcon. Simultaneously, integration testing within the ROS 2 ecosystem ensures the smooth collaboration of diverse modules. This streamlined approach accelerates the testing pipeline, allowing for efficient identification of issues related to both code compilation and module interactions.</p>"},{"location":"rules/#launch-file-validation","title":"Launch File Validation","text":"<p>Thoroughly evaluating ROS 2 launch files remains a priority in our testing strategy. This step, now seamlessly integrated into our unified approach, confirms proper system configuration, reducing potential issues during runtime.</p>"},{"location":"rules/#peer-collaboration-and-code-review","title":"Peer Collaboration and Code Review","text":"<p>Prior to merging, collaborative peer reviews using Git and GitHub enhance code quality without mandating unit tests, fostering knowledge sharing among developers.</p>"},{"location":"rules/#simulation-and-real-world-validation","title":"Simulation and Real-World Validation","text":"<p>Our testing strategy integrates both Gazebo simulations and real-world scenario validations:</p> <ul> <li> <p>Gazebo Simulation Testing: Harnessing Gazebo's power, we simulate intricate robotic scenarios, offering a comprehensive testing environment without mandating unit tests.</p> </li> <li> <p>Real-World Testing against Specifications: Ensuring practical compliance, this step validates that our ROS 2 applications meet specific requirements outlined in specifications.</p> </li> </ul> <p>By merging the initial code compilation and integration testing phases, we create a unified foundation for our ROS 2 testing strategy. This streamlined process enhances efficiency, allowing for quicker identification and resolution of potential issues.</p>"},{"location":"rules/#checking-specification","title":"Checking Specification","text":"<p>To prevent scope creep, checking againtst the specifications set out in the beginnen of te project will help to maintain quality. By for example when almost done with our delivarables checking which of the MOSCOW-Requirments have been implemented. </p>"}]}